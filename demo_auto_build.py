#!/usr/bin/env python3
"""
Demo script showing the automatic options selection functionality
"""

import sys
import os

# Add current directory to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def demo_auto_build():
    """Demonstrate the automatic build functionality"""
    try:
        from html2exe_pro_premium import AutoOptionsSelector, AppConfig, BuildEngine
        
        print("üöÄ HTML2EXE Pro Premium - Auto Build Demo")
        print("=" * 50)
        
        # Create configuration
        config = AppConfig()
        config.metadata.name = "DemoApp"
        config.build.source_path = "/workspace/test_app"
        config.build.source_type = "folder"
        config.build.output_dir = "demo_dist"
        
        print(f"üìÅ Source: {config.build.source_path}")
        print(f"üì¶ App Name: {config.metadata.name}")
        print(f"üìÇ Output: {config.build.output_dir}")
        
        # Analyze source and get recommendations
        print("\nüîç Analyzing source...")
        analysis = AutoOptionsSelector.analyze_source(
            config.build.source_path, 
            config.build.source_type
        )
        
        print(f"üìä Analysis Results:")
        print(f"  ‚Ä¢ Single File: {'Yes' if analysis['onefile'] else 'No'}")
        print(f"  ‚Ä¢ Console Window: {'Yes' if analysis['console'] else 'No'}")
        print(f"  ‚Ä¢ Debug Mode: {'Yes' if analysis['debug'] else 'No'}")
        print(f"  ‚Ä¢ UPX Compression: {'Yes' if analysis['upx_compress'] else 'No'}")
        print(f"  ‚Ä¢ Strip Debug: {'Yes' if analysis['strip_debug'] else 'No'}")
        print(f"  ‚Ä¢ Offline Mode: {'Yes' if analysis.get('offline_mode', False) else 'No'}")
        print(f"  ‚Ä¢ Optimization: {analysis['optimization_level']}")
        
        # Apply automatic recommendations
        config.build.onefile = analysis["onefile"]
        config.build.console = analysis["console"]
        config.build.debug = analysis["debug"]
        config.build.upx_compress = analysis["upx_compress"]
        config.build.strip_debug = analysis["strip_debug"]
        config.build.offline_mode = analysis.get("offline_mode", False)
        
        # Get optimal PyInstaller options
        print("\n‚öôÔ∏è Generating optimal PyInstaller options...")
        options = AutoOptionsSelector.get_optimal_pyinstaller_options(config)
        
        print(f"üîß PyInstaller Command Options:")
        for i, option in enumerate(options, 1):
            print(f"  {i:2d}. {option}")
        
        # Simulate build process (without actually building)
        print(f"\nüèóÔ∏è Build Process Simulation:")
        print(f"  1. ‚úÖ Source analysis completed")
        print(f"  2. ‚úÖ Optimal settings selected")
        print(f"  3. ‚úÖ PyInstaller options generated")
        print(f"  4. ‚è≥ Ready to build executable")
        
        print(f"\nüìã Build Summary:")
        print(f"  ‚Ä¢ Source Type: {config.build.source_type}")
        print(f"  ‚Ä¢ Build Mode: {'Single File' if config.build.onefile else 'Directory'}")
        print(f"  ‚Ä¢ Window Mode: {'Console' if config.build.console else 'Windowed'}")
        print(f"  ‚Ä¢ Optimization: {analysis['optimization_level']}")
        print(f"  ‚Ä¢ Estimated Size: 15-25 MB (single file) or 5-10 MB (directory)")
        
        print(f"\nüéâ Auto Build Configuration Complete!")
        print(f"   The system has automatically selected the optimal settings")
        print(f"   for building your HTML application into a desktop executable.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def demo_url_analysis():
    """Demonstrate URL analysis"""
    try:
        from html2exe_pro_premium import AutoOptionsSelector
        
        print("\nüåê URL Analysis Demo")
        print("-" * 30)
        
        # Test URL analysis
        url_analysis = AutoOptionsSelector.analyze_source("https://example.com", "url")
        
        print(f"URL Analysis Results:")
        print(f"  ‚Ä¢ Single File: {'Yes' if url_analysis['onefile'] else 'No'}")
        print(f"  ‚Ä¢ Offline Mode: {'Yes' if url_analysis.get('offline_mode', False) else 'No'}")
        print(f"  ‚Ä¢ Optimization: {url_analysis['optimization_level']}")
        
        print(f"\nüí° URL-based apps are automatically configured for:")
        print(f"   ‚Ä¢ Single file distribution (portability)")
        print(f"   ‚Ä¢ Offline mode (caching external resources)")
        print(f"   ‚Ä¢ Portable optimization (smaller size)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå URL demo failed: {e}")
        return False

if __name__ == "__main__":
    print("HTML2EXE Pro Premium - Automatic Options Selection Demo")
    print("=" * 60)
    
    success = True
    
    # Run demos
    success &= demo_auto_build()
    success &= demo_url_analysis()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ All demos completed successfully!")
        print("\n‚ú® Key Features Demonstrated:")
        print("  ‚Ä¢ Automatic source analysis")
        print("  ‚Ä¢ Optimal settings selection")
        print("  ‚Ä¢ PyInstaller command generation")
        print("  ‚Ä¢ URL vs folder mode handling")
        print("  ‚Ä¢ Build optimization recommendations")
    else:
        print("‚ùå Some demos failed!")
        sys.exit(1)